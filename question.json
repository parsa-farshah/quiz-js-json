[
  {
    "id": 1,
    "question": "مهم‌ترین نسخه جاوااسکریپت که نقطه‌ی شروع دوران وب مدرن محسوب می‌شود، در چه سالی منتشر شد؟",
    "options": ["2005", "2009", "2012", "2015"],
    "answer": "2015"
  },
  {
    "id": 2,
    "question": "کدام یک از گزینه‌های زیر در مورد جاوااسکریپت صحیح است؟",
    "options": [
      "زبان کامپایلری است",
      "نیاز به برنامه خاصی برای اجرا دارد",
      "به صورت مفسری اجرا می‌شود",
      "فقط در سمت سرور کار می‌کند"
    ],
    "answer": "به صورت مفسری اجرا می‌شود"
  },
  {
    "id": 3,
    "question": "مدل DOM در جاوااسکریپت چه مفهومی دارد؟",
    "options": [
      "مدل داده برای سرور",
      "دسترسی هدفمند به عناصر HTML",
      "مدل طراحی وب واکنش‌گرا",
      "ابزاری برای رفع خطا"
    ],
    "answer": "دسترسی هدفمند به عناصر HTML"
  },
  {
    "id": 4,
    "question": "تفاوت اصلی بین DOM و BOM چیست؟",
    "options": [
      "DOM مربوط به مرورگر و BOM مربوط به سند HTML است",
      "DOM به عناصر صفحه و BOM به مرورگر مربوط است",
      "BOM فقط در Node.js استفاده می‌شود",
      "هر دو کاملاً یکسان هستند"
    ],
    "answer": "DOM به عناصر صفحه و BOM به مرورگر مربوط است"
  },
  {
    "id": 5,
    "question": "در عملیات جمع بین دو مقدار از نوع string در جاوااسکریپت چه اتفاقی می‌افتد؟",
    "options": [
      "ارور رخ می‌دهد",
      "جمع ریاضی انجام می‌شود",
      "مقادیر به هم چسبانده می‌شوند",
      "نتیجه null خواهد بود"
    ],
    "answer": "مقادیر به هم چسبانده می‌شوند"
  },
  {
    "id": 6,
    "question": "بزرگ‌ترین تفاوت var با let و const چیست؟",
    "options": [
      "var قبل از تعریف قابل استفاده است",
      "let فقط در ES3 وجود دارد",
      "const از نوع global است",
      "let باعث خطای نحوی می‌شود"
    ],
    "answer": "var قبل از تعریف قابل استفاده است"
  },
  {
    "id": 7,
    "question": "از متغیر const معمولاً برای چه نوع داده‌ای استفاده می‌شود؟",
    "options": ["اعداد صحیح", "رشته‌ها", "آرایه‌ها و آبجکت‌ها", "مقادیر بولین"],
    "answer": "آرایه‌ها و آبجکت‌ها"
  },
  {
    "id": 8,
    "question": "در شرط AND چه زمانی نتیجه true خواهد بود؟",
    "options": [
      "اگر حداقل یکی از شروط درست باشد",
      "اگر تمام شروط درست باشند",
      "اگر یکی از شروط نادرست باشد",
      "هیچ‌گاه true نخواهد شد"
    ],
    "answer": "اگر تمام شروط درست باشند"
  },
  {
    "id": 9,
    "question": "کدام عبارت در مورد return در توابع درست است؟",
    "options": [
      "برای ارسال مقدار از خارج تابع استفاده می‌شود",
      "مقدار بازگشتی تابع را مشخص می‌کند",
      "فقط در توابع async استفاده می‌شود",
      "به جای print عمل می‌کند"
    ],
    "answer": "مقدار بازگشتی تابع را مشخص می‌کند"
  },
  {
    "id": 10,
    "question": "در arrow function در جاوااسکریپت کدام ویژگی وجود ندارد؟",
    "options": [
      "دسترسی مستقیم به this",
      "توانایی بازگشت مقدار",
      "قابلیت استفاده در متغیر",
      "سینتکس کوتاه‌تر"
    ],
    "answer": "دسترسی مستقیم به this"
  },
  {
    "id": 11,
    "question": "ارتباط ناهمزمان (Asynchronous Communication) در جاوااسکریپت با استفاده از چه تکنولوژی‌ای ممکن می‌شود؟",
    "options": ["Fetch", "Ajax", "Promise", "Event Loop"],
    "answer": "Ajax"
  },
  {
    "id": 12,
    "question": "در جاوااسکریپت، حلقه‌ها برای چه منظوری به کار می‌روند؟",
    "options": [
      "برای جلوگیری از اجرای دستور",
      "برای تکرار یک دستور به دفعات مشخص",
      "برای ساخت شرط‌های منطقی",
      "برای مدیریت حافظه"
    ],
    "answer": "برای تکرار یک دستور به دفعات مشخص"
  },
  {
    "id": 13,
    "question": "هدف از ابزار Dev Tool Debugging در مرورگرها چیست؟",
    "options": [
      "مدیریت کوکی‌ها",
      "اشکال‌زدایی و بررسی کدها",
      "افزایش سرعت اجرا",
      "ذخیره داده در حافظه مرورگر"
    ],
    "answer": "اشکال‌زدایی و بررسی کدها"
  },
  {
    "id": 14,
    "question": "اسکوپ یا حوزه دسترسی در جاوااسکریپت به چه معناست؟",
    "options": [
      "نحوه دسترسی به عناصر HTML",
      "محل تعریف و محدوده‌ی اعتبار متغیرها",
      "نوع داده‌ی متغیرها",
      "نوع اجرای توابع"
    ],
    "answer": "محل تعریف و محدوده‌ی اعتبار متغیرها"
  },
  {
    "id": 15,
    "question": "Garbage Collection در جاوااسکریپت چه وظیفه‌ای دارد؟",
    "options": [
      "مدیریت حافظه و پاک‌سازی داده‌های غیرقابل دسترس",
      "مدیریت حلقه‌های تکرار",
      "افزایش سرعت مرورگر",
      "مدیریت توابع async"
    ],
    "answer": "مدیریت حافظه و پاک‌سازی داده‌های غیرقابل دسترس"
  },
  {
    "id": 16,
    "question": "کدام روش برای تبدیل رشته به عدد در جاوااسکریپت استفاده می‌شود؟",
    "options": ["parseInt()", "toString()", "String()", "split()"],
    "answer": "parseInt()"
  },
  {
    "id": 17,
    "question": "در جاوااسکریپت، مقدار NaN به چه معناست؟",
    "options": [
      "Null and Nothing",
      "Not a Number",
      "New Active Node",
      "Negative Number"
    ],
    "answer": "Not a Number"
  },
  {
    "id": 18,
    "question": "کدام گزینه برای بررسی نوع داده در جاوااسکریپت استفاده می‌شود؟",
    "options": ["typeof", "dataType()", "instanceof()", "checkType()"],
    "answer": "typeof"
  },
  {
    "id": 19,
    "question": "در یک آرایه، برای افزودن عنصر به انتهای لیست از چه متدی استفاده می‌شود؟",
    "options": ["push()", "pop()", "shift()", "concat()"],
    "answer": "push()"
  },
  {
    "id": 20,
    "question": "متد slice() در آرایه چه کاری انجام می‌دهد؟",
    "options": [
      "حذف عنصر از ابتدا",
      "افزودن عنصر جدید",
      "برش بخشی از آرایه بدون تغییر آرایه اصلی",
      "تغییر مستقیم آرایه اصلی"
    ],
    "answer": "برش بخشی از آرایه بدون تغییر آرایه اصلی"
  },
  {
    "id": 21,
    "question": "در جاوااسکریپت، کدام ساختار برای تکرار روی آرایه‌ها مناسب‌تر است؟",
    "options": ["for...of", "for...in", "while", "if...else"],
    "answer": "for...of"
  },
  {
    "id": 22,
    "question": "کدام گزینه در مورد setInterval() صحیح است؟",
    "options": [
      "فقط یک بار تابع را اجرا می‌کند",
      "تابع را در بازه‌های زمانی مشخص تکرار می‌کند",
      "برای توقف کد استفاده می‌شود",
      "مقدار return ندارد"
    ],
    "answer": "تابع را در بازه‌های زمانی مشخص تکرار می‌کند"
  },
  {
    "id": 23,
    "question": "برای توقف اجرای setInterval() از چه تابعی استفاده می‌شود؟",
    "options": ["clearTimeout()", "stop()", "pause()", "clearInterval()"],
    "answer": "clearInterval()"
  },
  {
    "id": 24,
    "question": "کدام گزینه در مورد callback function درست است؟",
    "options": [
      "تابعی است که بلافاصله اجرا می‌شود",
      "تابعی است که به عنوان آرگومان به تابع دیگر ارسال می‌شود",
      "تابعی است که فقط در حلقه اجرا می‌شود",
      "تابعی است که مقدار برنمی‌گرداند"
    ],
    "answer": "تابعی است که به عنوان آرگومان به تابع دیگر ارسال می‌شود"
  },
  {
    "id": 25,
    "question": "Promise در جاوااسکریپت برای چه استفاده می‌شود؟",
    "options": [
      "تعریف متغیرهای ثابت",
      "مدیریت عملیات ناهمزمان",
      "ایجاد DOM جدید",
      "تبدیل رشته‌ها به عدد"
    ],
    "answer": "مدیریت عملیات ناهمزمان"
  },
  {
    "id": 26,
    "question": "کدام یک از حالت‌های promise به معنی موفقیت‌آمیز بودن اجرای آن است؟",
    "options": ["pending", "rejected", "fulfilled", "failed"],
    "answer": "fulfilled"
  },
  {
    "id": 27,
    "question": "کدام کلیدواژه برای تعریف تابع async در جاوااسکریپت استفاده می‌شود؟",
    "options": ["await", "sync", "async", "defer"],
    "answer": "async"
  },
  {
    "id": 28,
    "question": "کدام کلیدواژه تنها در داخل توابع async مجاز است؟",
    "options": ["then", "catch", "await", "resolve"],
    "answer": "await"
  },
  {
    "id": 29,
    "question": "کدام گزینه برای گرفتن خطا در اجرای Promise استفاده می‌شود؟",
    "options": [".catch()", ".error()", ".fail()", ".reject()"],
    "answer": ".catch()"
  },
  {
    "id": 30,
    "question": "در جاوااسکریپت، try...catch برای چه هدفی استفاده می‌شود؟",
    "options": [
      "برای تعریف شرط",
      "برای کنترل خطاها",
      "برای ساخت متغیرها",
      "برای تکرار دستور"
    ],
    "answer": "برای کنترل خطاها"
  },
  {
    "id": 31,
    "question": "در DOM، متد querySelector() چه کاری انجام می‌دهد؟",
    "options": [
      "افزودن تگ جدید",
      "انتخاب اولین المان مطابق با selector",
      "تغییر رنگ متن",
      "بررسی رخدادهای صفحه"
    ],
    "answer": "انتخاب اولین المان مطابق با selector"
  },
  {
    "id": 32,
    "question": "برای افزودن event listener به یک عنصر از چه متدی استفاده می‌شود؟",
    "options": [
      "attachEvent()",
      "setListener()",
      "addEventListener()",
      "onEvent()"
    ],
    "answer": "addEventListener()"
  },
  {
    "id": 33,
    "question": "کدام گزینه در مورد this در جاوااسکریپت صحیح است؟",
    "options": [
      "به مقدار ثابت اشاره دارد",
      "به context فعلی اجرا اشاره دارد",
      "همیشه به window اشاره دارد",
      "فقط در arrow function تعریف می‌شود"
    ],
    "answer": "به context فعلی اجرا اشاره دارد"
  },
  {
    "id": 34,
    "question": "کدام گزینه برای جلوگیری از اجرای پیش‌فرض رخدادها در مرورگر استفاده می‌شود؟",
    "options": [
      "preventDefault()",
      "stopPropagation()",
      "return false",
      "clearEvent()"
    ],
    "answer": "preventDefault()"
  },
  {
    "id": 35,
    "question": "در جاوااسکریپت، JSON.stringify() چه کاری انجام می‌دهد؟",
    "options": [
      "تبدیل رشته به آبجکت",
      "تبدیل آبجکت به رشته",
      "حذف کلیدهای آبجکت",
      "افزودن داده جدید به JSON"
    ],
    "answer": "تبدیل آبجکت به رشته"
  },
  {
    "id": 36,
    "question": "در JSON.parse() چه کاری انجام می‌شود؟",
    "options": [
      "تبدیل رشته JSON به آبجکت جاوااسکریپت",
      "تبدیل آبجکت به آرایه",
      "تبدیل تابع به متن",
      "بررسی نوع داده"
    ],
    "answer": "تبدیل رشته JSON به آبجکت جاوااسکریپت"
  },
  {
    "id": 37,
    "question": "کدام ویژگی در Local Storage وجود دارد؟",
    "options": [
      "حافظه موقت که با بستن مرورگر پاک می‌شود",
      "داده‌ها تا حذف دستی باقی می‌مانند",
      "فقط در session فعال است",
      "محدود به 100 کیلوبایت است"
    ],
    "answer": "داده‌ها تا حذف دستی باقی می‌مانند"
  },
  {
    "id": 38,
    "question": "برای حذف داده از Local Storage از چه متدی استفاده می‌شود؟",
    "options": ["deleteItem()", "removeItem()", "clearData()", "unset()"],
    "answer": "removeItem()"
  },
  {
    "id": 39,
    "question": "کدام گزینه برای حذف تمام داده‌های ذخیره‌شده در localStorage به کار می‌رود؟",
    "options": ["clearAll()", "reset()", "clear()", "deleteAll()"],
    "answer": "clear()"
  },
  {
    "id": 40,
    "question": "کدام یک از گزینه‌های زیر جزء داده‌ساختارهای اولیه در جاوااسکریپت است؟",
    "options": ["Object", "Array", "String", "Function"],
    "answer": "String"
  },
  {
    "id": 41,
    "question": "کدام گزینه در مورد آرایه‌های چندبعدی در جاوااسکریپت صحیح است؟",
    "options": [
      "در جاوااسکریپت وجود ندارند",
      "در واقع آرایه‌ای از آرایه‌ها هستند",
      "فقط در Node.js پشتیبانی می‌شوند",
      "باید با کلید تعریف شوند"
    ],
    "answer": "در واقع آرایه‌ای از آرایه‌ها هستند"
  },
  {
    "id": 42,
    "question": "کدام گزینه برای بررسی وجود یک کلید در آبجکت استفاده می‌شود؟",
    "options": [
      "'key' in object",
      "object.contains('key')",
      "object.hasKey('key')",
      "exists(object, 'key')"
    ],
    "answer": "'key' in object"
  },
  {
    "id": 43,
    "question": "کدام متد برای تکرار روی کلیدهای یک آبجکت به کار می‌رود؟",
    "options": [
      "Object.keys()",
      "Object.map()",
      "Object.forEach()",
      "Object.loop()"
    ],
    "answer": "Object.keys()"
  },
  {
    "id": 44,
    "question": "کدام گزینه در مورد arrow function اشتباه است؟",
    "options": [
      "this مخصوص خود ندارد",
      "می‌تواند چند خط کد داشته باشد",
      "برای تعریف متدهای کلاس مناسب است",
      "دارای سینتکس کوتاه‌تر است"
    ],
    "answer": "برای تعریف متدهای کلاس مناسب است"
  },
  {
    "id": 45,
    "question": "در جاوااسکریپت، closure چیست؟",
    "options": [
      "تابعی که درون تابع دیگر تعریف شده و به متغیرهای آن دسترسی دارد",
      "ابزاری برای حذف حافظه",
      "ساختار شرطی برای مقایسه مقادیر",
      "تابعی بدون ورودی و خروجی"
    ],
    "answer": "تابعی که درون تابع دیگر تعریف شده و به متغیرهای آن دسترسی دارد"
  },
  {
    "id": 46,
    "question": "در جاوااسکریپت، Hoisting به چه معناست؟",
    "options": [
      "بالا کشیدن اعلان متغیرها و توابع به ابتدای حوزه",
      "تبدیل کد به bytecode",
      "افزایش سرعت اجرای حلقه‌ها",
      "ذخیره موقت داده‌ها در حافظه"
    ],
    "answer": "بالا کشیدن اعلان متغیرها و توابع به ابتدای حوزه"
  },
  {
    "id": 47,
    "question": "در حالت strict mode چه محدودیتی اعمال می‌شود؟",
    "options": [
      "کد سریع‌تر اجرا می‌شود",
      "امکان استفاده از متغیرهای تعریف‌نشده از بین می‌رود",
      "this همیشه برابر با window است",
      "تابع‌ها خودکار return می‌شوند"
    ],
    "answer": "امکان استفاده از متغیرهای تعریف‌نشده از بین می‌رود"
  },
  {
    "id": 48,
    "question": "برای فعال‌سازی حالت strict در جاوااسکریپت چه باید نوشت؟",
    "options": ["'use strict';", "enableStrict();", "#strict", "set('strict')"],
    "answer": "'use strict';"
  },
  {
    "id": 49,
    "question": "در جاوااسکریپت، کدام دستور برای کپی سطحی آبجکت استفاده می‌شود؟",
    "options": [
      "Object.assign()",
      "Object.copy()",
      "Object.clone()",
      "JSON.copy()"
    ],
    "answer": "Object.assign()"
  },
  {
    "id": 50,
    "question": "کدام متد آرایه باعث حذف اولین عنصر می‌شود؟",
    "options": ["pop()", "shift()", "splice()", "slice()"],
    "answer": "shift()"
  },
  {
    "id": 51,
    "question": "کدام متد آرایه باعث حذف آخرین عنصر می‌شود؟",
    "options": ["push()", "pop()", "slice()", "filter()"],
    "answer": "pop()"
  },
  {
    "id": 52,
    "question": "کدام متد برای ترکیب دو آرایه استفاده می‌شود؟",
    "options": ["merge()", "concat()", "join()", "append()"],
    "answer": "concat()"
  },
  {
    "id": 53,
    "question": "کدام متد رشته‌ای برای جستجوی زیررشته استفاده می‌شود؟",
    "options": ["indexOf()", "searchWord()", "contains()", "scan()"],
    "answer": "indexOf()"
  },
  {
    "id": 54,
    "question": "کدام متد رشته را به آرایه تبدیل می‌کند؟",
    "options": ["split()", "slice()", "splice()", "join()"],
    "answer": "split()"
  },
  {
    "id": 55,
    "question": "در جاوااسکریپت، eval() چه کاری انجام می‌دهد؟",
    "options": [
      "کد جاوااسکریپت را از رشته اجرا می‌کند",
      "کد را به JSON تبدیل می‌کند",
      "برای اشکال‌زدایی استفاده می‌شود",
      "کد را فقط بررسی نحوی می‌کند"
    ],
    "answer": "کد جاوااسکریپت را از رشته اجرا می‌کند"
  },
  {
    "id": 56,
    "question": "کدام گزینه برای بررسی برابر بودن مقدار و نوع در جاوااسکریپت است؟",
    "options": ["==", "===", "!=", "!=="],
    "answer": "==="
  },
  {
    "id": 57,
    "question": "کدام گزینه نشان‌دهنده تفاوت '==' و '===' است؟",
    "options": [
      "'==' فقط مقدار را مقایسه می‌کند، اما '===' مقدار و نوع را بررسی می‌کند",
      "هر دو دقیقاً یکسان‌اند",
      "'===' فقط در Node.js پشتیبانی می‌شود",
      "'==' فقط برای اعداد است"
    ],
    "answer": "'==' فقط مقدار را مقایسه می‌کند، اما '===' مقدار و نوع را بررسی می‌کند"
  },
  {
    "id": 58,
    "question": "کدام ساختار برای جلوگیری از اجرای ادامه‌ی تابع استفاده می‌شود؟",
    "options": ["return", "break", "continue", "stop"],
    "answer": "return"
  },
  {
    "id": 59,
    "question": "کدام گزینه برای خروج از حلقه به کار می‌رود؟",
    "options": ["exit()", "return", "break", "continue"],
    "answer": "break"
  },
  {
    "id": 60,
    "question": "کدام گزینه باعث پرش به تکرار بعدی حلقه می‌شود؟",
    "options": ["return", "break", "continue", "next"],
    "answer": "continue"
  },
  {
    "id": 61,
    "question": "کدام گزینه برای ساخت شیء از روی کلاس استفاده می‌شود؟",
    "options": ["new", "create", "object", "instance"],
    "answer": "new"
  },
  {
    "id": 62,
    "question": "در کلاس‌ها، constructor چه نقشی دارد؟",
    "options": [
      "برای اجرای اولیه‌ی شیء هنگام ساخت استفاده می‌شود",
      "برای پاک کردن شیء استفاده می‌شود",
      "برای تعریف متغیرهای ثابت است",
      "برای کپی اشیاء استفاده می‌شود"
    ],
    "answer": "برای اجرای اولیه‌ی شیء هنگام ساخت استفاده می‌شود"
  },
  {
    "id": 63,
    "question": "کدام گزینه برای ارث‌بری در کلاس‌ها استفاده می‌شود؟",
    "options": ["inherits", "extends", "super", "prototype"],
    "answer": "extends"
  },
  {
    "id": 64,
    "question": "کدام کلیدواژه برای دسترسی به کلاس والد استفاده می‌شود؟",
    "options": ["parent", "base", "super", "this"],
    "answer": "super"
  },
  {
    "id": 65,
    "question": "کدام متد Promise برای اجرای چند Promise به صورت هم‌زمان استفاده می‌شود؟",
    "options": [
      "Promise.all()",
      "Promise.race()",
      "Promise.group()",
      "Promise.sync()"
    ],
    "answer": "Promise.all()"
  },
  {
    "id": 66,
    "question": "کدام متد Promise اولین نتیجه را (چه موفق چه ناموفق) بازمی‌گرداند؟",
    "options": [
      "Promise.any()",
      "Promise.first()",
      "Promise.race()",
      "Promise.one()"
    ],
    "answer": "Promise.race()"
  },
  {
    "id": 67,
    "question": "کدام گزینه در مورد async/await صحیح است؟",
    "options": [
      "کدهای ناهمزمان را ساده‌تر می‌کند",
      "جایگزین کامل Promise است",
      "فقط در NodeJS اجرا می‌شود",
      "باعث توقف مرورگر می‌شود"
    ],
    "answer": "کدهای ناهمزمان را ساده‌تر می‌کند"
  },
  {
    "id": 68,
    "question": "در حلقه for...in چه چیزی تکرار می‌شود؟",
    "options": [
      "مقادیر آرایه",
      "کلیدهای شیء",
      "ایندکس‌ها و مقادیر",
      "تگ‌های DOM"
    ],
    "answer": "کلیدهای شیء"
  },
  {
    "id": 69,
    "question": "در حلقه for...of چه چیزی تکرار می‌شود؟",
    "options": ["کلیدهای شیء", "مقادیر قابل تکرار", "فقط رشته‌ها", "توابع"],
    "answer": "مقادیر قابل تکرار"
  },
  {
    "id": 70,
    "question": "کدام گزینه برای ایجاد تاخیر در اجرای تابع به کار می‌رود؟",
    "options": ["setTimeout()", "setDelay()", "wait()", "sleep()"],
    "answer": "setTimeout()"
  },
  {
    "id": 71,
    "question": "کدام گزینه برای اجرای مداوم یک تابع در فواصل زمانی مشخص استفاده می‌شود؟",
    "options": ["setTimeout()", "setInterval()", "loop()", "repeat()"],
    "answer": "setInterval()"
  },
  {
    "id": 72,
    "question": "کدام متد برای توقف اجرای setInterval استفاده می‌شود؟",
    "options": [
      "stopInterval()",
      "clearInterval()",
      "endTimer()",
      "cancelLoop()"
    ],
    "answer": "clearInterval()"
  },
  {
    "id": 73,
    "question": "کدام گزینه برای بررسی نوع متغیر در جاوااسکریپت استفاده می‌شود؟",
    "options": ["typeOf()", "typeof", "getType()", "varType()"],
    "answer": "typeof"
  },
  {
    "id": 74,
    "question": "خروجی typeof null چیست؟",
    "options": ["'null'", "'undefined'", "'object'", "'number'"],
    "answer": "'object'"
  },
  {
    "id": 75,
    "question": "در جاوااسکریپت، NaN به چه معناست؟",
    "options": [
      "Not a Number",
      "No assigned Number",
      "New array Number",
      "Null and None"
    ],
    "answer": "Not a Number"
  },
  {
    "id": 76,
    "question": "کدام متد برای بررسی NaN بودن یک مقدار به کار می‌رود؟",
    "options": ["Number.isNaN()", "isNumber()", "isUndefined()", "checkNaN()"],
    "answer": "Number.isNaN()"
  },
  {
    "id": 77,
    "question": "کدام گزینه در مورد JSON.stringify درست است؟",
    "options": [
      "آبجکت را به رشته JSON تبدیل می‌کند",
      "رشته JSON را به آبجکت تبدیل می‌کند",
      "آبجکت را در فایل ذخیره می‌کند",
      "فقط برای آرایه‌ها کاربرد دارد"
    ],
    "answer": "آبجکت را به رشته JSON تبدیل می‌کند"
  },
  {
    "id": 78,
    "question": "کدام گزینه برای تبدیل رشته JSON به آبجکت استفاده می‌شود؟",
    "options": [
      "JSON.parse()",
      "JSON.decode()",
      "JSON.convert()",
      "parseJSON()"
    ],
    "answer": "JSON.parse()"
  },
  {
    "id": 79,
    "question": "در DOM، متد querySelector چه کاری انجام می‌دهد؟",
    "options": [
      "اولین المنتی که با selector مطابقت دارد را برمی‌گرداند",
      "تمام المنت‌ها را حذف می‌کند",
      "همه المنت‌ها را لیست می‌کند",
      "المنت را به آرایه تبدیل می‌کند"
    ],
    "answer": "اولین المنتی که با selector مطابقت دارد را برمی‌گرداند"
  },
  {
    "id": 80,
    "question": "کدام متد برای انتخاب تمام المنت‌های مطابق selector استفاده می‌شود؟",
    "options": ["querySelectorAll()", "getElements()", "findAll()", "getAll()"],
    "answer": "querySelectorAll()"
  },
  {
    "id": 81,
    "question": "کدام متد برای ایجاد یک المنت جدید در DOM استفاده می‌شود؟",
    "options": ["createElement()", "append()", "newNode()", "generate()"],
    "answer": "createElement()"
  },
  {
    "id": 82,
    "question": "برای افزودن یک المنت به داخل المنت دیگر از چه متدی استفاده می‌شود؟",
    "options": ["appendChild()", "insert()", "addElement()", "push()"],
    "answer": "appendChild()"
  },
  {
    "id": 83,
    "question": "برای حذف یک المنت از DOM از چه متدی استفاده می‌شود؟",
    "options": ["removeChild()", "delete()", "pop()", "clear()"],
    "answer": "removeChild()"
  },
  {
    "id": 84,
    "question": "کدام گزینه برای دسترسی به مقدار یک input در DOM استفاده می‌شود؟",
    "options": [
      "element.value",
      "element.text",
      "element.innerHTML",
      "element.content"
    ],
    "answer": "element.value"
  },
  {
    "id": 85,
    "question": "در event handling، preventDefault() چه کاری انجام می‌دهد؟",
    "options": [
      "رفتار پیش‌فرض عنصر را متوقف می‌کند",
      "کلیدهای صفحه‌کلید را قفل می‌کند",
      "رویداد را حذف می‌کند",
      "تابع را مجدداً اجرا می‌کند"
    ],
    "answer": "رفتار پیش‌فرض عنصر را متوقف می‌کند"
  },
  {
    "id": 86,
    "question": "در event handling، stopPropagation() چه کاری انجام می‌دهد؟",
    "options": [
      "از ادامه رویداد در سلسله‌مراتب DOM جلوگیری می‌کند",
      "رویداد را لغو می‌کند",
      "رویداد را به انتها منتقل می‌کند",
      "کد را متوقف می‌کند"
    ],
    "answer": "از ادامه رویداد در سلسله‌مراتب DOM جلوگیری می‌کند"
  },
  {
    "id": 87,
    "question": "کدام رویداد هنگام بارگذاری کامل صفحه اجرا می‌شود؟",
    "options": ["onload", "onstart", "onready", "oncreate"],
    "answer": "onload"
  },
  {
    "id": 88,
    "question": "کدام رویداد هنگام تغییر مقدار input فعال می‌شود؟",
    "options": ["onchange", "onclick", "onupdate", "oninput"],
    "answer": "onchange"
  },
  {
    "id": 89,
    "question": "کدام گزینه برای بررسی وضعیت مرورگر فعلی استفاده می‌شود؟",
    "options": ["navigator", "window.info", "browser", "client"],
    "answer": "navigator"
  },
  {
    "id": 90,
    "question": "کدام شیء نمایانگر پنجره مرورگر است؟",
    "options": ["window", "document", "navigator", "screen"],
    "answer": "window"
  },
  {
    "id": 91,
    "question": "کدام شیء برای دسترسی به محتوای HTML صفحه استفاده می‌شود؟",
    "options": ["document", "window", "form", "navigator"],
    "answer": "document"
  },
  {
    "id": 92,
    "question": "کدام ویژگی موقعیت کاربر را در صفحه نشان می‌دهد؟",
    "options": [
      "window.scrollY",
      "window.top",
      "document.position",
      "pageIndex"
    ],
    "answer": "window.scrollY"
  },
  {
    "id": 93,
    "question": "کدام ویژگی در localStorage داده را ذخیره می‌کند؟",
    "options": [
      "localStorage.setItem()",
      "localStorage.add()",
      "localStorage.store()",
      "localStorage.push()"
    ],
    "answer": "localStorage.setItem()"
  },
  {
    "id": 94,
    "question": "داده‌های ذخیره‌شده در sessionStorage تا چه زمانی باقی می‌مانند؟",
    "options": [
      "تا بسته شدن تب مرورگر",
      "برای همیشه",
      "تا پاک شدن کش مرورگر",
      "تا رفرش صفحه"
    ],
    "answer": "تا بسته شدن تب مرورگر"
  },
  {
    "id": 95,
    "question": "کدام متد برای دریافت داده از localStorage استفاده می‌شود؟",
    "options": ["getItem()", "read()", "fetch()", "retrieve()"],
    "answer": "getItem()"
  },
  {
    "id": 96,
    "question": "کدام دستور برای حذف یک داده خاص از localStorage استفاده می‌شود؟",
    "options": ["removeItem()", "delete()", "clearData()", "popItem()"],
    "answer": "removeItem()"
  },
  {
    "id": 97,
    "question": "کدام دستور تمام داده‌های localStorage را حذف می‌کند؟",
    "options": ["clear()", "deleteAll()", "reset()", "flush()"],
    "answer": "clear()"
  },
  {
    "id": 98,
    "question": "در جاوااسکریپت، event delegation چه مزیتی دارد؟",
    "options": [
      "کاهش تعداد event listenerها با استفاده از bubbling",
      "افزایش سرعت حلقه‌ها",
      "اجرای کد به صورت موازی",
      "بهبود حافظه رم"
    ],
    "answer": "کاهش تعداد event listenerها با استفاده از bubbling"
  },
  {
    "id": 99,
    "question": "در async/await، اگر await در تابعی بدون async استفاده شود چه می‌شود؟",
    "options": [
      "خطا رخ می‌دهد",
      "به طور خودکار async می‌شود",
      "کد نادیده گرفته می‌شود",
      "تابع متوقف می‌شود"
    ],
    "answer": "خطا رخ می‌دهد"
  },
  {
    "id": 100,
    "question": "در جاوااسکریپت، کدام گزینه برای مدیریت خطا در Promise استفاده می‌شود؟",
    "options": ["catch()", "handle()", "try()", "error()"],
    "answer": "catch()"
  }
]
