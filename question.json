[
  {
    "id": 1,
    "question": "مهم‌ترین نسخه جاوااسکریپت که نقطه‌ی شروع دوران وب مدرن محسوب می‌شود، در چه سالی منتشر شد؟",
    "options": ["2005", "2009", "2012", "2015"],
    "answer": "2015"
  },
  {
    "id": 2,
    "question": "کدام گزینه در مورد جاوااسکریپت صحیح است؟",
    "options": [
      "زبان کامپایلری است",
      "به صورت مفسری اجرا می‌شود",
      "فقط در سمت سرور اجرا می‌شود",
      "برای کار با پایگاه داده طراحی شده"
    ],
    "answer": "به صورت مفسری اجرا می‌شود"
  },
  {
    "id": 3,
    "question": "مدل DOM در جاوااسکریپت چه مفهومی دارد؟",
    "options": [
      "مدل داده برای سرور",
      "دسترسی هدفمند به عناصر HTML",
      "ابزار تست واحدها",
      "الگوی طراحی MVC"
    ],
    "answer": "دسترسی هدفمند به عناصر HTML"
  },
  {
    "id": 4,
    "question": "تفاوت اصلی بین DOM و BOM چیست؟",
    "options": [
      "DOM مربوط به عناصر صفحه است و BOM مربوط به مرورگر",
      "BOM برای ارتباط با سرور استفاده می‌شود",
      "DOM فقط در Node.js وجود دارد",
      "هر دو کاملاً یکسان هستند"
    ],
    "answer": "DOM مربوط به عناصر صفحه است و BOM مربوط به مرورگر"
  },
  {
    "id": 5,
    "question": "در عملیات جمع بین دو مقدار از نوع string در جاوااسکریپت چه اتفاقی می‌افتد؟",
    "options": [
      "ارور رخ می‌دهد",
      "جمع ریاضی انجام می‌شود",
      "مقادیر به هم چسبانده می‌شوند",
      "مقدار undefined بازمی‌گردد"
    ],
    "answer": "مقادیر به هم چسبانده می‌شوند"
  },
  {
    "id": 6,
    "question": "بزرگ‌ترین تفاوت var با let و const چیست؟",
    "options": [
      "var قبل از تعریف قابل دسترسی است",
      "let فقط در ES3 پشتیبانی می‌شود",
      "const متغیر سراسری ایجاد می‌کند",
      "var مقدار ثابت ایجاد می‌کند"
    ],
    "answer": "var قبل از تعریف قابل دسترسی است"
  },
  {
    "id": 7,
    "question": "از متغیر const معمولاً برای چه نوع داده‌ای استفاده می‌شود؟",
    "options": [
      "مقادیر ثابت و آبجکت‌ها",
      "اعداد تصادفی",
      "توابع async",
      "متغیرهای global"
    ],
    "answer": "مقادیر ثابت و آبجکت‌ها"
  },
  {
    "id": 8,
    "question": "در شرط AND چه زمانی نتیجه true خواهد بود؟",
    "options": [
      "اگر هر دو شرط درست باشند",
      "اگر حداقل یکی درست باشد",
      "اگر هر دو نادرست باشند",
      "همیشه false است"
    ],
    "answer": "اگر هر دو شرط درست باشند"
  },
  {
    "id": 9,
    "question": "کدام عبارت در مورد return در توابع درست است؟",
    "options": [
      "برای پایان اجرای تابع و بازگرداندن مقدار استفاده می‌شود",
      "برای خروج از حلقه استفاده می‌شود",
      "به جای console.log عمل می‌کند",
      "فقط در توابع async مجاز است"
    ],
    "answer": "برای پایان اجرای تابع و بازگرداندن مقدار استفاده می‌شود"
  },
  {
    "id": 10,
    "question": "در arrow function در جاوااسکریپت کدام ویژگی وجود ندارد؟",
    "options": [
      "this مخصوص خود ندارد",
      "سینتکس کوتاه‌تر دارد",
      "می‌تواند return داشته باشد",
      "دارای hoisting است"
    ],
    "answer": "دارای hoisting است"
  },
  {
    "id": 11,
    "question": "کدام مورد برای انجام ارتباط ناهمزمان در جاوااسکریپت استفاده می‌شود؟",
    "options": ["Ajax", "Fetch API", "Promise", "همه موارد"],
    "answer": "همه موارد"
  },
  {
    "id": 12,
    "question": "در جاوااسکریپت، حلقه‌ها برای چه منظوری استفاده می‌شوند؟",
    "options": [
      "برای تکرار اجرای یک بخش از کد",
      "برای بررسی خطا",
      "برای تعریف شرط‌ها",
      "برای ذخیره داده در حافظه"
    ],
    "answer": "برای تکرار اجرای یک بخش از کد"
  },
  {
    "id": 13,
    "question": "DevTools در مرورگر چه کاربردی دارد؟",
    "options": [
      "اشکال‌زدایی و بررسی DOM و Network",
      "مدیریت کوکی‌ها",
      "ذخیره داده در لوکال استوریج",
      "اجرای خودکار اسکریپت‌ها"
    ],
    "answer": "اشکال‌زدایی و بررسی DOM و Network"
  },
  {
    "id": 14,
    "question": "Scope یا حوزه در جاوااسکریپت به چه معناست؟",
    "options": [
      "محل تعریف و محدوده اعتبار متغیرها",
      "نوع داده متغیرها",
      "نحوه نمایش کدها",
      "نوع تابع‌ها"
    ],
    "answer": "محل تعریف و محدوده اعتبار متغیرها"
  },
  {
    "id": 15,
    "question": "وظیفه‌ی Garbage Collector چیست؟",
    "options": [
      "مدیریت حافظه و حذف داده‌های غیرقابل دسترس",
      "افزایش سرعت حلقه‌ها",
      "مدیریت async function",
      "ذخیره موقت داده‌ها"
    ],
    "answer": "مدیریت حافظه و حذف داده‌های غیرقابل دسترس"
  },
  {
    "id": 16,
    "question": "کدام روش برای تبدیل رشته به عدد استفاده می‌شود؟",
    "options": ["parseInt()", "toString()", "String()", "split()"],
    "answer": "parseInt()"
  },
  {
    "id": 17,
    "question": "NaN در جاوااسکریپت به چه معناست؟",
    "options": [
      "Not a Number",
      "Null and None",
      "New Assigned Node",
      "Negative Number"
    ],
    "answer": "Not a Number"
  },
  {
    "id": 18,
    "question": "برای بررسی نوع داده از چه کلیدواژه‌ای استفاده می‌شود؟",
    "options": ["typeof", "type()", "dataType()", "instanceof()"],
    "answer": "typeof"
  },
  {
    "id": 19,
    "question": "برای حذف عنصر آخر آرایه از چه متدی استفاده می‌شود؟",
    "options": ["pop()", "shift()", "splice()", "remove()"],
    "answer": "pop()"
  },
  {
    "id": 20,
    "question": "متد slice() چه کاری انجام می‌دهد؟",
    "options": [
      "کپی بخشی از آرایه بدون تغییر آرایه اصلی",
      "حذف عنصر از ابتدا",
      "تغییر مستقیم آرایه",
      "افزودن مقدار جدید"
    ],
    "answer": "کپی بخشی از آرایه بدون تغییر آرایه اصلی"
  },
  {
    "id": 21,
    "question": "کدام گزینه برای تکرار روی عناصر آرایه مناسب است؟",
    "options": ["for...of", "for...in", "while", "map()"],
    "answer": "for...of"
  },
  {
    "id": 22,
    "question": "تابع setTimeout() چه کاری انجام می‌دهد؟",
    "options": [
      "اجرای تابع بعد از مدت زمان مشخص",
      "اجرای تابع به صورت مکرر",
      "حذف تاخیر از کد",
      "اجرای فوری تابع"
    ],
    "answer": "اجرای تابع بعد از مدت زمان مشخص"
  },
  {
    "id": 23,
    "question": "کدام تابع برای متوقف کردن setInterval() استفاده می‌شود؟",
    "options": ["clearInterval()", "pause()", "stop()", "resetInterval()"],
    "answer": "clearInterval()"
  },
  {
    "id": 24,
    "question": "Callback function چیست؟",
    "options": [
      "تابعی که به عنوان پارامتر به تابع دیگر ارسال می‌شود",
      "تابعی که همیشه async است",
      "تابعی که مقدار بازنمی‌گرداند",
      "تابعی که حلقه ایجاد می‌کند"
    ],
    "answer": "تابعی که به عنوان پارامتر به تابع دیگر ارسال می‌شود"
  },
  {
    "id": 25,
    "question": "Promise در جاوااسکریپت برای چه استفاده می‌شود؟",
    "options": [
      "مدیریت عملیات ناهمزمان",
      "ذخیره داده در حافظه",
      "مدیریت DOM",
      "کنترل حلقه‌ها"
    ],
    "answer": "مدیریت عملیات ناهمزمان"
  },
  {
    "id": 26,
    "question": "کدام وضعیت Promise نشان‌دهنده موفقیت است؟",
    "options": ["pending", "fulfilled", "rejected", "aborted"],
    "answer": "fulfilled"
  },
  {
    "id": 27,
    "question": "کدام کلیدواژه برای تعریف تابع ناهمزمان استفاده می‌شود؟",
    "options": ["async", "await", "defer", "sync"],
    "answer": "async"
  },
  {
    "id": 28,
    "question": "کلیدواژه await در کجا مجاز است؟",
    "options": [
      "داخل توابع async",
      "در هر تابعی",
      "فقط در Node.js",
      "فقط در حلقه‌ها"
    ],
    "answer": "داخل توابع async"
  },
  {
    "id": 29,
    "question": "کدام متد برای مدیریت خطا در Promise استفاده می‌شود؟",
    "options": [".catch()", ".reject()", ".fail()", ".error()"],
    "answer": ".catch()"
  },
  {
    "id": 30,
    "question": "try...catch در جاوااسکریپت چه کاربردی دارد؟",
    "options": [
      "کنترل و مدیریت خطاها",
      "تعریف شرط",
      "ساخت متغیرها",
      "تکرار دستورات"
    ],
    "answer": "کنترل و مدیریت خطاها"
  },
  {
    "id": 31,
    "question": "متد querySelector() در DOM چه کاری انجام می‌دهد؟",
    "options": [
      "انتخاب اولین المان مطابق selector",
      "حذف تمام المان‌ها",
      "ایجاد المان جدید",
      "بررسی رویدادها"
    ],
    "answer": "انتخاب اولین المان مطابق selector"
  },
  {
    "id": 32,
    "question": "برای افزودن event listener از چه متدی استفاده می‌شود؟",
    "options": [
      "addEventListener()",
      "attachEvent()",
      "setListener()",
      "onEvent()"
    ],
    "answer": "addEventListener()"
  },
  {
    "id": 33,
    "question": "this در جاوااسکریپت به چه چیزی اشاره دارد؟",
    "options": [
      "context اجرای فعلی",
      "مقدار ثابت",
      "همیشه window",
      "فقط در arrow function"
    ],
    "answer": "context اجرای فعلی"
  },
  {
    "id": 34,
    "question": "برای جلوگیری از رفتار پیش‌فرض یک رویداد چه می‌کنیم؟",
    "options": [
      "preventDefault()",
      "stopPropagation()",
      "return false",
      "clearEvent()"
    ],
    "answer": "preventDefault()"
  },
  {
    "id": 35,
    "question": "JSON.stringify() چه کاری انجام می‌دهد؟",
    "options": [
      "تبدیل آبجکت به رشته JSON",
      "تبدیل رشته به آبجکت",
      "حذف کلیدهای آبجکت",
      "افزودن داده جدید"
    ],
    "answer": "تبدیل آبجکت به رشته JSON"
  },
  {
    "id": 36,
    "question": "JSON.parse() چه کاری انجام می‌دهد؟",
    "options": [
      "تبدیل رشته JSON به آبجکت جاوااسکریپت",
      "تبدیل آبجکت به آرایه",
      "تبدیل تابع به متن",
      "بررسی نوع داده"
    ],
    "answer": "تبدیل رشته JSON به آبجکت جاوااسکریپت"
  },
  {
    "id": 37,
    "question": "Local Storage چه ویژگی‌ای دارد؟",
    "options": [
      "داده‌ها تا حذف دستی باقی می‌مانند",
      "با بسته شدن مرورگر پاک می‌شود",
      "فقط در session فعال است",
      "محدود به 100 کیلوبایت است"
    ],
    "answer": "داده‌ها تا حذف دستی باقی می‌مانند"
  },
  {
    "id": 38,
    "question": "برای حذف داده از Local Storage چه می‌کنیم؟",
    "options": ["removeItem()", "deleteItem()", "clearData()", "unset()"],
    "answer": "removeItem()"
  },
  {
    "id": 39,
    "question": "برای حذف همه داده‌های Local Storage چه متدی استفاده می‌شود؟",
    "options": ["clear()", "reset()", "deleteAll()", "flush()"],
    "answer": "clear()"
  },
  {
    "id": 40,
    "question": "کدام یک داده‌ساختار پایه‌ای در جاوااسکریپت است؟",
    "options": ["String", "Array", "Object", "Function"],
    "answer": "String"
  },
  {
    "id": 41,
    "question": "آرایه چندبعدی چیست؟",
    "options": [
      "آرایه‌ای از آرایه‌ها",
      "در جاوااسکریپت وجود ندارد",
      "فقط در Node.js پشتیبانی می‌شود",
      "با کلید تعریف می‌شود"
    ],
    "answer": "آرایه‌ای از آرایه‌ها"
  },
  {
    "id": 42,
    "question": "برای بررسی وجود یک کلید در آبجکت چه استفاده می‌شود؟",
    "options": [
      "'key' in object",
      "object.hasKey('key')",
      "object.contains('key')",
      "exists(object,'key')"
    ],
    "answer": "'key' in object"
  },
  {
    "id": 43,
    "question": "کدام متد برای دریافت کلیدهای یک آبجکت استفاده می‌شود؟",
    "options": [
      "Object.keys()",
      "Object.map()",
      "Object.forEach()",
      "Object.loop()"
    ],
    "answer": "Object.keys()"
  },
  {
    "id": 44,
    "question": "کدام ویژگی arrow function اشتباه است؟",
    "options": [
      "this مخصوص خود ندارد",
      "می‌تواند چند خط کد داشته باشد",
      "برای تعریف متدهای کلاس مناسب است",
      "سینتکس کوتاه‌تر دارد"
    ],
    "answer": "برای تعریف متدهای کلاس مناسب است"
  },
  {
    "id": 45,
    "question": "Closure چیست؟",
    "options": [
      "تابعی که درون تابع دیگر تعریف شده و به متغیرهای آن دسترسی دارد",
      "ابزاری برای پاکسازی حافظه",
      "ساختار شرطی برای مقایسه مقادیر",
      "تابعی بدون ورودی و خروجی"
    ],
    "answer": "تابعی که درون تابع دیگر تعریف شده و به متغیرهای آن دسترسی دارد"
  },
  {
    "id": 46,
    "question": "Hoisting به چه معناست؟",
    "options": [
      "بالا کشیدن اعلان متغیرها و توابع به ابتدای scope",
      "تبدیل کد به bytecode",
      "افزایش سرعت حلقه‌ها",
      "ذخیره موقت داده‌ها در حافظه"
    ],
    "answer": "بالا کشیدن اعلان متغیرها و توابع به ابتدای scope"
  },
  {
    "id": 47,
    "question": "در حالت strict چه محدودیتی اعمال می‌شود؟",
    "options": [
      "استفاده از متغیرهای تعریف‌نشده ممنوع است",
      "this همیشه window است",
      "تابع‌ها خودکار return می‌شوند",
      "کد سریع‌تر اجرا می‌شود"
    ],
    "answer": "استفاده از متغیرهای تعریف‌نشده ممنوع است"
  },
  {
    "id": 48,
    "question": "برای فعال‌سازی strict mode چه چیزی نوشته می‌شود؟",
    "options": ["'use strict';", "enableStrict()", "#strict", "set('strict')"],
    "answer": "'use strict';"
  },
  {
    "id": 49,
    "question": "کدام دستور برای کپی سطحی آبجکت استفاده می‌شود؟",
    "options": [
      "Object.assign()",
      "Object.copy()",
      "Object.clone()",
      "JSON.copy()"
    ],
    "answer": "Object.assign()"
  },
  {
    "id": 50,
    "question": "کدام متد آرایه اولین عنصر را حذف می‌کند؟",
    "options": ["shift()", "pop()", "splice()", "slice()"],
    "answer": "shift()"
  },
  {
    "id": 51,
    "question": "کدام متد آرایه آخرین عنصر را حذف می‌کند؟",
    "options": ["pop()", "push()", "slice()", "filter()"],
    "answer": "pop()"
  },
  {
    "id": 52,
    "question": "کدام متد برای ترکیب دو آرایه استفاده می‌شود؟",
    "options": ["concat()", "merge()", "join()", "append()"],
    "answer": "concat()"
  },
  {
    "id": 53,
    "question": "برای جستجوی زیررشته در یک رشته از چه متدی استفاده می‌شود؟",
    "options": ["indexOf()", "contains()", "searchWord()", "scan()"],
    "answer": "indexOf()"
  },
  {
    "id": 54,
    "question": "کدام متد رشته را به آرایه تبدیل می‌کند؟",
    "options": ["split()", "slice()", "splice()", "join()"],
    "answer": "split()"
  },
  {
    "id": 55,
    "question": "eval() چه کاری انجام می‌دهد؟",
    "options": [
      "اجرای کد جاوااسکریپت از رشته",
      "تبدیل کد به JSON",
      "برای اشکال‌زدایی استفاده می‌شود",
      "فقط بررسی نحوی انجام می‌دهد"
    ],
    "answer": "اجرای کد جاوااسکریپت از رشته"
  },
  {
    "id": 56,
    "question": "برای بررسی برابر بودن مقدار و نوع از چه عملگری استفاده می‌شود؟",
    "options": ["===", "==", "!=", "!=="],
    "answer": "==="
  },
  {
    "id": 57,
    "question": "تفاوت '==' و '===' چیست؟",
    "options": [
      "'==' فقط مقدار را بررسی می‌کند، '===' مقدار و نوع را",
      "هر دو یکسان‌اند",
      "'===' فقط در Node.js کاربرد دارد",
      "'==' فقط برای اعداد است"
    ],
    "answer": "'==' فقط مقدار را بررسی می‌کند، '===' مقدار و نوع را"
  },
  {
    "id": 58,
    "question": "برای جلوگیری از اجرای ادامه‌ی تابع چه می‌کنیم؟",
    "options": ["return", "break", "continue", "stop"],
    "answer": "return"
  },
  {
    "id": 59,
    "question": "برای خروج از حلقه از چه استفاده می‌کنیم؟",
    "options": ["break", "return", "continue", "exit()"],
    "answer": "break"
  },
  {
    "id": 60,
    "question": "برای رفتن به تکرار بعدی حلقه چه استفاده می‌شود؟",
    "options": ["continue", "break", "return", "next"],
    "answer": "continue"
  },
  {
    "id": 61,
    "question": "برای ساخت شیء از روی کلاس از چه استفاده می‌کنیم؟",
    "options": ["new", "create", "object", "instance"],
    "answer": "new"
  },
  {
    "id": 62,
    "question": "constructor در کلاس چه نقشی دارد؟",
    "options": [
      "اجرای اولیه‌ی شیء هنگام ساخت",
      "پاک کردن شیء",
      "تعریف متغیرهای ثابت",
      "کپی اشیاء"
    ],
    "answer": "اجرای اولیه‌ی شیء هنگام ساخت"
  },
  {
    "id": 63,
    "question": "برای ارث‌بری در کلاس‌ها از چه استفاده می‌کنیم؟",
    "options": ["extends", "inherits", "super", "prototype"],
    "answer": "extends"
  },
  {
    "id": 64,
    "question": "برای دسترسی به کلاس والد از چه کلیدواژه‌ای استفاده می‌شود؟",
    "options": ["super", "parent", "base", "this"],
    "answer": "super"
  },
  {
    "id": 65,
    "question": "کدام متد Promise تمام Promiseها را همزمان اجرا می‌کند؟",
    "options": [
      "Promise.all()",
      "Promise.race()",
      "Promise.group()",
      "Promise.sync()"
    ],
    "answer": "Promise.all()"
  },
  {
    "id": 66,
    "question": "کدام متد Promise اولین نتیجه را برمی‌گرداند؟",
    "options": [
      "Promise.race()",
      "Promise.any()",
      "Promise.first()",
      "Promise.one()"
    ],
    "answer": "Promise.race()"
  },
  {
    "id": 67,
    "question": "async/await چه کاربردی دارد؟",
    "options": [
      "ساده‌تر کردن کدهای ناهمزمان",
      "جایگزین کامل Promise است",
      "فقط در Node.js اجرا می‌شود",
      "باعث توقف مرورگر می‌شود"
    ],
    "answer": "ساده‌تر کردن کدهای ناهمزمان"
  },
  {
    "id": 68,
    "question": "for...in روی چه چیزی تکرار می‌شود؟",
    "options": ["کلیدهای شیء", "مقادیر آرایه", "ایندکس و مقادیر", "تگ‌های DOM"],
    "answer": "کلیدهای شیء"
  },
  {
    "id": 69,
    "question": "for...of روی چه چیزی تکرار می‌شود؟",
    "options": ["مقادیر قابل تکرار", "کلیدهای شیء", "فقط رشته‌ها", "توابع"],
    "answer": "مقادیر قابل تکرار"
  },
  {
    "id": 70,
    "question": "برای ایجاد تاخیر در اجرای تابع از چه استفاده می‌کنیم؟",
    "options": ["setTimeout()", "setDelay()", "wait()", "sleep()"],
    "answer": "setTimeout()"
  },
  {
    "id": 71,
    "question": "برای اجرای مداوم یک تابع در فواصل زمانی مشخص چه می‌کنیم؟",
    "options": ["setInterval()", "setTimeout()", "loop()", "repeat()"],
    "answer": "setInterval()"
  },
  {
    "id": 72,
    "question": "برای توقف اجرای setInterval چه متدی استفاده می‌شود؟",
    "options": [
      "clearInterval()",
      "stopInterval()",
      "endTimer()",
      "cancelLoop()"
    ],
    "answer": "clearInterval()"
  },
  {
    "id": 73,
    "question": "برای بررسی نوع متغیر چه استفاده می‌شود؟",
    "options": ["typeof", "typeOf()", "getType()", "varType()"],
    "answer": "typeof"
  },
  {
    "id": 74,
    "question": "typeof null چه خروجی دارد؟",
    "options": ["'object'", "'null'", "'undefined'", "'number'"],
    "answer": "'object'"
  },
  {
    "id": 75,
    "question": "NaN به چه معناست؟",
    "options": [
      "Not a Number",
      "No assigned Number",
      "New array Number",
      "Null and None"
    ],
    "answer": "Not a Number"
  },
  {
    "id": 76,
    "question": "برای بررسی NaN بودن مقدار از چه استفاده می‌شود؟",
    "options": ["Number.isNaN()", "isNumber()", "isUndefined()", "checkNaN()"],
    "answer": "Number.isNaN()"
  },
  {
    "id": 77,
    "question": "JSON.stringify() چه کاری انجام می‌دهد؟",
    "options": [
      "تبدیل آبجکت به رشته JSON",
      "تبدیل رشته JSON به آبجکت",
      "ذخیره آبجکت در فایل",
      "فقط برای آرایه‌ها کاربرد دارد"
    ],
    "answer": "تبدیل آبجکت به رشته JSON"
  },
  {
    "id": 78,
    "question": "برای تبدیل رشته JSON به آبجکت از چه استفاده می‌شود؟",
    "options": [
      "JSON.parse()",
      "JSON.decode()",
      "JSON.convert()",
      "parseJSON()"
    ],
    "answer": "JSON.parse()"
  },
  {
    "id": 79,
    "question": "querySelector در DOM چه کاری می‌کند؟",
    "options": [
      "اولین المنت مطابق selector را برمی‌گرداند",
      "تمام المنت‌ها را حذف می‌کند",
      "تمام المنت‌ها را لیست می‌کند",
      "المنت را به آرایه تبدیل می‌کند"
    ],
    "answer": "اولین المنت مطابق selector را برمی‌گرداند"
  },
  {
    "id": 80,
    "question": "برای انتخاب تمام المان‌های مطابق selector از چه استفاده می‌کنیم؟",
    "options": ["querySelectorAll()", "getElements()", "findAll()", "getAll()"],
    "answer": "querySelectorAll()"
  },
  {
    "id": 81,
    "question": "برای ایجاد یک المان جدید در DOM چه متدی استفاده می‌شود؟",
    "options": ["createElement()", "append()", "newNode()", "generate()"],
    "answer": "createElement()"
  },
  {
    "id": 82,
    "question": "برای افزودن یک المان به داخل المان دیگر چه متدی استفاده می‌کنیم؟",
    "options": ["appendChild()", "insert()", "addElement()", "push()"],
    "answer": "appendChild()"
  },
  {
    "id": 83,
    "question": "برای حذف یک المان از DOM چه متدی استفاده می‌کنیم؟",
    "options": ["removeChild()", "delete()", "pop()", "clear()"],
    "answer": "removeChild()"
  },
  {
    "id": 84,
    "question": "برای دسترسی به مقدار input از چه استفاده می‌کنیم؟",
    "options": [
      "element.value",
      "element.innerHTML",
      "element.text",
      "element.content"
    ],
    "answer": "element.value"
  },
  {
    "id": 85,
    "question": "preventDefault() چه کاری انجام می‌دهد؟",
    "options": [
      "متوقف کردن رفتار پیش‌فرض عنصر",
      "قفل کردن کلیدها",
      "حذف رویداد",
      "اجرای دوباره تابع"
    ],
    "answer": "متوقف کردن رفتار پیش‌فرض عنصر"
  },
  {
    "id": 86,
    "question": "stopPropagation() چه کاری انجام می‌دهد؟",
    "options": [
      "جلوگیری از ادامه رویداد در bubbling",
      "لغو رویداد",
      "انتقال رویداد به انتها",
      "توقف کد"
    ],
    "answer": "جلوگیری از ادامه رویداد در bubbling"
  },
  {
    "id": 87,
    "question": "کدام رویداد هنگام بارگذاری کامل صفحه اجرا می‌شود؟",
    "options": ["onload", "onready", "onstart", "oncreate"],
    "answer": "onload"
  },
  {
    "id": 88,
    "question": "کدام رویداد هنگام تغییر مقدار input فعال می‌شود؟",
    "options": ["onchange", "oninput", "onclick", "onupdate"],
    "answer": "onchange"
  },
  {
    "id": 89,
    "question": "برای بررسی وضعیت مرورگر از چه استفاده می‌کنیم؟",
    "options": ["navigator", "window.info", "browser", "client"],
    "answer": "navigator"
  },
  {
    "id": 90,
    "question": "کدام شیء نمایانگر پنجره مرورگر است؟",
    "options": ["window", "document", "navigator", "screen"],
    "answer": "window"
  },
  {
    "id": 91,
    "question": "برای دسترسی به محتوای HTML صفحه از چه استفاده می‌کنیم؟",
    "options": ["document", "window", "form", "navigator"],
    "answer": "document"
  },
  {
    "id": 92,
    "question": "کدام ویژگی موقعیت کاربر در صفحه را نشان می‌دهد؟",
    "options": [
      "window.scrollY",
      "window.top",
      "document.position",
      "pageIndex"
    ],
    "answer": "window.scrollY"
  },
  {
    "id": 93,
    "question": "برای ذخیره داده در localStorage چه متدی استفاده می‌کنیم؟",
    "options": [
      "localStorage.setItem()",
      "localStorage.add()",
      "localStorage.store()",
      "localStorage.push()"
    ],
    "answer": "localStorage.setItem()"
  },
  {
    "id": 94,
    "question": "داده‌های sessionStorage تا چه زمانی باقی می‌مانند؟",
    "options": [
      "تا بسته شدن تب مرورگر",
      "برای همیشه",
      "تا پاک شدن کش",
      "تا رفرش صفحه"
    ],
    "answer": "تا بسته شدن تب مرورگر"
  },
  {
    "id": 95,
    "question": "برای دریافت داده از localStorage چه متدی استفاده می‌شود؟",
    "options": ["getItem()", "read()", "fetch()", "retrieve()"],
    "answer": "getItem()"
  },
  {
    "id": 96,
    "question": "برای حذف یک داده خاص از localStorage چه استفاده می‌کنیم؟",
    "options": ["removeItem()", "delete()", "clearData()", "popItem()"],
    "answer": "removeItem()"
  },
  {
    "id": 97,
    "question": "برای حذف تمام داده‌های localStorage چه متدی استفاده می‌کنیم؟",
    "options": ["clear()", "deleteAll()", "reset()", "flush()"],
    "answer": "clear()"
  },
  {
    "id": 98,
    "question": "event delegation چه مزیتی دارد؟",
    "options": [
      "کاهش تعداد event listenerها با bubbling",
      "افزایش سرعت حلقه‌ها",
      "اجرای کد موازی",
      "بهبود حافظه رم"
    ],
    "answer": "کاهش تعداد event listenerها با bubbling"
  },
  {
    "id": 99,
    "question": "اگر از await در تابع بدون async استفاده کنیم چه می‌شود؟",
    "options": [
      "خطا رخ می‌دهد",
      "تابع async می‌شود خودکار",
      "کد نادیده گرفته می‌شود",
      "تابع متوقف می‌شود"
    ],
    "answer": "خطا رخ می‌دهد"
  },
  {
    "id": 100,
    "question": "برای مدیریت خطا در Promise از چه استفاده می‌کنیم؟",
    "options": ["catch()", "handle()", "try()", "error()"],
    "answer": "catch()"
  }
]
